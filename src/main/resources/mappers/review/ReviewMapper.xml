<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ProductMapper Xml -->
<mapper namespace="org.fktm.fastpickup.review.mappers.ReviewMapper">

       <!-- 리뷰 등록 -->
    <insert id ="registReview">
        insert into tbl_review(memberID, pno , reviewTitle, reviewContent) values(#{memberID}, #{pno}, #{reviewTitle}, #{reviewContent})
        
        <selectKey resultType="Long" keyProperty="rno" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <!-- 대댓글(리뷰) 그룹번호 업데이트 -->
    <update id = "updateGno">
        update tbl_review set gno = #{rno} where rno = #{rno}
    </update>

    <!-- 대댓글(리뷰 등록) -->
    <insert id ="registChildReview">
        insert into tbl_review(memberID, pno, gno, reviewTitle, reviewContent) values(#{memberID}, #{pno}, #{gno}, #{reviewTitle}, #{reviewContent})
        
        <selectKey resultType="Long" keyProperty="rno" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 댓글(리뷰) 상세보기 -->

    <resultMap id="reviewMap" type="org.fktm.fastpickup.review.dto.ReviewReadDTO">
        <id property="rno" column="rno"/>
        <result property="pno" column="pno"/>
        <result property="memberID" column="memberID"/>
        <result property="productName" column="productName"/>
        <result property="reviewTitle" column="reviewTitle"/>
        <result property="reviewContent" column="reviewContent"/>
        <result property="registDate" column="registDate"/>
        <collection property="imgsName" resultMap="imgsNameMap"/>
    </resultMap>

    <resultMap type="string" id="imgsNameMap">
        <result column="imgsName"/>
    </resultMap>

    <select id ="readReview" resultMap="reviewMap">
        select tr.rno, tp.pno, tp.productName, tr.memberID, tr.reviewTitle, tr.reviewContent, tr.registDate, concat(tri.uuid,'_',tri.imgName) as imgsName
        from tbl_review tr left outer join tbl_product tp on tr.pno = tp.pno
                            left outer join tbl_review_img tri on tr.rno = tri.rno
        where tr.rno = #{rno}
    </select>
    <!-- 댓글(리뷰) 상세보기 -->

    <!-- 댓글(마이페이지 리뷰) 리스트 -->
    <select id = "getReviewList">
        select tr.rno, tr.gno , tr.isDeleted, tp.pno, tp.productName, tr.memberID, tr.reviewTitle, tr.reviewContent, tr.registDate, concat(tri.uuid,'_',tri.imgName) as imgName
        from tbl_review tr left outer join tbl_product tp on tr.pno = tp.pno
                            left outer join tbl_review_img tri on tr.rno = tri.rno
        where (tri.imgOrd is null or tri.imgOrd = 0)

        <if test="memberID != 'admin'">
          and tr.memberID = #{memberID} and tr.isDeleted = 0
        </if>

        order by tr.gno asc, tr.rno asc
        limit #{pr.skip}, #{pr.size}
    </select>
    <!-- 댓글(리뷰) 페이징을 위한 total -->
    <select id ="getTotal">
        select count(*)
        from(select tr.rno, tr.gno, tr.isDeleted, tp.pno, tp.productName, tr.memberID, tr.reviewTitle, tr.reviewContent, tr.registDate, concat(tri.uuid,'_',tri.imgName) as imgName
            from tbl_review tr left outer join tbl_product tp on tr.pno = tp.pno
                left outer join tbl_review_img tri on tr.rno = tri.rno
            where (tri.imgOrd is null or tri.imgOrd = 0)

            <if test="memberID != 'admin'">
                and tr.memberID = #{memberID} and tr.isDeleted = 0
            </if>

            order by tr.gno asc, tr.rno asc
            limit #{pr.countEnd}
            )review
            
    </select>


        <!-- 댓글(상품상세페이지 리뷰) 리스트 -->
    <select id = "getProductReviewList">
        select tr.rno, tr.gno , tr.isDeleted, tp.pno, tp.productName, tr.memberID, tr.reviewTitle, tr.reviewContent, tr.registDate, concat(tri.uuid,'_',tri.imgName) as imgName
        from tbl_review tr left outer join tbl_product tp on tr.pno = tp.pno
                            left outer join tbl_review_img tri on tr.rno = tri.rno
        where (tri.imgOrd is null or tri.imgOrd = 0) and tr.isDeleted = 0 and tp.pno = #{pno}
        order by tr.gno asc, tr.rno asc
        limit #{pr.skip}, #{pr.size}
    </select>
    <!-- 댓글(리뷰) 페이징을 위한 total -->
    <select id ="getProductReviewTotal">
        select count(*)
        from(select tr.rno, tr.gno, tr.isDeleted, tp.pno, tp.productName, tr.memberID, tr.reviewTitle, tr.reviewContent, tr.registDate, concat(tri.uuid,'_',tri.imgName) as imgName
            from tbl_review tr left outer join tbl_product tp on tr.pno = tp.pno
                left outer join tbl_review_img tri on tr.rno = tri.rno
            where (tri.imgOrd is null or tri.imgOrd = 0) and tr.isDeleted = 0 and tp.pno = #{pno}
            order by tr.gno asc, tr.rno asc
            limit #{pr.countEnd}
            )review
            
    </select>

    <!-- 리뷰 삭제 -->
    <update id ="removeReview">
        update tbl_review 
        set isDeleted = true
        where rno = #{rno}
    </update>

    <!-- 리뷰 수정 -->
    <update id ="modifyReview">
        update tbl_review
        set reviewTitle = #{reviewTitle}, reviewContent = #{reviewContent}
        where rno = #{rno}
    </update>

</mapper>